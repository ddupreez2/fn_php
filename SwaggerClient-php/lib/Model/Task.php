<?php
/**
 * Task
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IronFunctions
 *
 * The open source serverless platform.
 *
 * OpenAPI spec version: 0.1.29
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Task Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Task implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Task';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'image' => 'string',
        'payload' => 'string',
        'group_name' => 'string',
        'error' => 'string',
        'reason' => 'string',
        'created_at' => '\DateTime',
        'started_at' => '\DateTime',
        'completed_at' => '\DateTime',
        'retry_of' => 'string',
        'retry_at' => 'string',
        'env_vars' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'image' => null,
        'payload' => null,
        'group_name' => null,
        'error' => null,
        'reason' => null,
        'created_at' => 'date-time',
        'started_at' => 'date-time',
        'completed_at' => 'date-time',
        'retry_of' => null,
        'retry_at' => null,
        'env_vars' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'image' => 'image',
        'payload' => 'payload',
        'group_name' => 'group_name',
        'error' => 'error',
        'reason' => 'reason',
        'created_at' => 'created_at',
        'started_at' => 'started_at',
        'completed_at' => 'completed_at',
        'retry_of' => 'retry_of',
        'retry_at' => 'retry_at',
        'env_vars' => 'env_vars'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'image' => 'setImage',
        'payload' => 'setPayload',
        'group_name' => 'setGroupName',
        'error' => 'setError',
        'reason' => 'setReason',
        'created_at' => 'setCreatedAt',
        'started_at' => 'setStartedAt',
        'completed_at' => 'setCompletedAt',
        'retry_of' => 'setRetryOf',
        'retry_at' => 'setRetryAt',
        'env_vars' => 'setEnvVars'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'image' => 'getImage',
        'payload' => 'getPayload',
        'group_name' => 'getGroupName',
        'error' => 'getError',
        'reason' => 'getReason',
        'created_at' => 'getCreatedAt',
        'started_at' => 'getStartedAt',
        'completed_at' => 'getCompletedAt',
        'retry_of' => 'getRetryOf',
        'retry_at' => 'getRetryAt',
        'env_vars' => 'getEnvVars'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const REASON_TIMEOUT = 'timeout';
    const REASON_KILLED = 'killed';
    const REASON_BAD_EXIT = 'bad_exit';
    const REASON_CLIENT_REQUEST = 'client_request';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_TIMEOUT,
            self::REASON_KILLED,
            self::REASON_BAD_EXIT,
            self::REASON_CLIENT_REQUEST,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['payload'] = isset($data['payload']) ? $data['payload'] : null;
        $this->container['group_name'] = isset($data['group_name']) ? $data['group_name'] : null;
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['started_at'] = isset($data['started_at']) ? $data['started_at'] : null;
        $this->container['completed_at'] = isset($data['completed_at']) ? $data['completed_at'] : null;
        $this->container['retry_of'] = isset($data['retry_of']) ? $data['retry_of'] : null;
        $this->container['retry_at'] = isset($data['retry_at']) ? $data['retry_at'] : null;
        $this->container['env_vars'] = isset($data['env_vars']) ? $data['env_vars'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['image'] === null) {
            $invalid_properties[] = "'image' can't be null";
        }
        $allowed_values = $this->getReasonAllowableValues();
        if (!in_array($this->container['reason'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'reason', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['image'] === null) {
            return false;
        }
        $allowed_values = $this->getReasonAllowableValues();
        if (!in_array($this->container['reason'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets image
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     * @param string $image Name of Docker image to use. This is optional and can be used to override the image defined at the group level.
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets payload
     * @return string
     */
    public function getPayload()
    {
        return $this->container['payload'];
    }

    /**
     * Sets payload
     * @param string $payload Payload for the task. This is what you pass into each task to make it do something.
     * @return $this
     */
    public function setPayload($payload)
    {
        $this->container['payload'] = $payload;

        return $this;
    }

    /**
     * Gets group_name
     * @return string
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     * @param string $group_name Group this task belongs to.
     * @return $this
     */
    public function setGroupName($group_name)
    {
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets error
     * @return string
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     * @param string $error The error message, if status is 'error'. This is errors due to things outside the task itself. Errors from user code will be found in the log.
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets reason
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     * @param string $reason Machine usable reason for task being in this state. Valid values for error status are `timeout | killed | bad_exit`. Valid values for cancelled status are `client_request`. For everything else, this is undefined.
     * @return $this
     */
    public function setReason($reason)
    {
        $allowed_values = $this->getReasonAllowableValues();
        if (!is_null($reason) && !in_array($reason, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reason', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param \DateTime $created_at Time when task was submitted. Always in UTC.
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets started_at
     * @return \DateTime
     */
    public function getStartedAt()
    {
        return $this->container['started_at'];
    }

    /**
     * Sets started_at
     * @param \DateTime $started_at Time when task started execution. Always in UTC.
     * @return $this
     */
    public function setStartedAt($started_at)
    {
        $this->container['started_at'] = $started_at;

        return $this;
    }

    /**
     * Gets completed_at
     * @return \DateTime
     */
    public function getCompletedAt()
    {
        return $this->container['completed_at'];
    }

    /**
     * Sets completed_at
     * @param \DateTime $completed_at Time when task completed, whether it was successul or failed. Always in UTC.
     * @return $this
     */
    public function setCompletedAt($completed_at)
    {
        $this->container['completed_at'] = $completed_at;

        return $this;
    }

    /**
     * Gets retry_of
     * @return string
     */
    public function getRetryOf()
    {
        return $this->container['retry_of'];
    }

    /**
     * Sets retry_of
     * @param string $retry_of If this field is set, then this task is a retry of the ID in this field.
     * @return $this
     */
    public function setRetryOf($retry_of)
    {
        $this->container['retry_of'] = $retry_of;

        return $this;
    }

    /**
     * Gets retry_at
     * @return string
     */
    public function getRetryAt()
    {
        return $this->container['retry_at'];
    }

    /**
     * Sets retry_at
     * @param string $retry_at If this field is set, then this task was retried by the task referenced in this field.
     * @return $this
     */
    public function setRetryAt($retry_at)
    {
        $this->container['retry_at'] = $retry_at;

        return $this;
    }

    /**
     * Gets env_vars
     * @return map[string,string]
     */
    public function getEnvVars()
    {
        return $this->container['env_vars'];
    }

    /**
     * Sets env_vars
     * @param map[string,string] $env_vars Env vars for the task. Comes from the ones set on the Group.
     * @return $this
     */
    public function setEnvVars($env_vars)
    {
        $this->container['env_vars'] = $env_vars;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


